diff --git a/payjoin-cli/src/app/mod.rs b/payjoin-cli/src/app/mod.rs
index 91adc16..cb3a3ef 100644
--- a/payjoin-cli/src/app/mod.rs
+++ b/payjoin-cli/src/app/mod.rs
@@ -29,6 +29,10 @@ pub trait App {
         Self: Sized;
     fn bitcoind(&self) -> Result<bitcoincore_rpc::Client>;
     async fn send_payjoin(&self, bip21: &str, fee_rate: &f32) -> Result<()>;
+    #[cfg(feature = "v2")]
+    async fn receive_payjoin(self, amount_arg: &str, address_arg: Option<&str>) -> Result<()>;
+    
+    #[cfg(not(feature = "v2"))]
     async fn receive_payjoin(self, amount_arg: &str) -> Result<()>;
 
     fn create_pj_request(&self, uri: &PjUri, fee_rate: &f32) -> Result<Sender> {
diff --git a/payjoin-cli/src/app/v2.rs b/payjoin-cli/src/app/v2.rs
index dc6a9cc..3f788b7 100644
--- a/payjoin-cli/src/app/v2.rs
+++ b/payjoin-cli/src/app/v2.rs
@@ -73,19 +73,27 @@ impl AppTrait for App {
         self.spawn_payjoin_sender(req_ctx).await
     }
 
-    async fn receive_payjoin(self, amount_arg: &str) -> Result<()> {
-        let address = self.bitcoind()?.get_new_address(None, None)?.assume_checked();
+    async fn receive_payjoin(self, amount_arg: &str, address_arg: Option<&str>) -> Result<()> {
+        let address = match address_arg {
+            Some(addr) => bitcoin::Address::from_str(addr)?.assume_checked(),
+            None => self.bitcoind()?.get_new_address(None, None)?.assume_checked(),
+        };
+        
         let amount = Amount::from_sat(amount_arg.parse()?);
         let ohttp_keys = unwrap_ohttp_keys_or_else_fetch(&self.config).await?;
         let session = Receiver::new(
-            address,
+            address.clone(),
             self.config.pj_directory.clone(),
             ohttp_keys.clone(),
             self.config.ohttp_relay.clone(),
             None,
         );
         self.db.insert_recv_session(session.clone())?;
-        self.spawn_payjoin_receiver(session, Some(amount)).await
+        self.spawn_payjoin_receiver(
+            session,
+            Some(amount),
+            address_arg.map(|_| address),
+        ).await
     }
 }
 
@@ -110,6 +118,7 @@ impl App {
         &self,
         mut session: Receiver,
         amount: Option<Amount>,
+        provided_address: Option<bitcoin::Address>,
     ) -> Result<()> {
         println!("Receive session established");
         let mut pj_uri_builder = session.pj_uri_builder();
@@ -133,7 +142,7 @@ impl App {
         println!("Fallback transaction received. Consider broadcasting this to get paid if the Payjoin fails:");
         println!("{}", serialize_hex(&res.extract_tx_to_schedule_broadcast()));
         let mut payjoin_proposal = self
-            .process_v2_proposal(res)
+            .process_v2_proposal(res, provided_address)
             .map_err(|e| anyhow!("Failed to process proposal {}", e))?;
         let (req, ohttp_ctx) = payjoin_proposal
             .extract_v2_req()
@@ -166,8 +175,9 @@ impl App {
 
         for session in recv_sessions {
             let self_clone = self.clone();
+            let address = session.extract_address().clone();
             tasks.push(tokio::spawn(async move {
-                self_clone.spawn_payjoin_receiver(session, None).await
+                self_clone.spawn_payjoin_receiver(session, None, Some(address)).await
             }));
         }
 
@@ -253,6 +263,7 @@ impl App {
     fn process_v2_proposal(
         &self,
         proposal: payjoin::receive::v2::UncheckedProposal,
+        provided_address: Option<bitcoin::Address>,
     ) -> Result<payjoin::receive::v2::PayjoinProposal, Error> {
         let bitcoind = self.bitcoind().map_err(|e| Error::Server(e.into()))?;
 
@@ -296,6 +307,13 @@ impl App {
 
         let payjoin = payjoin
             .identify_receiver_outputs(|output_script| {
+                // First check if this matches our provided address
+                if let Some(ref addr) = provided_address {
+                    if addr.script_pubkey() == *output_script {
+                        return Ok(true);
+                    }
+                }
+
                 if let Ok(address) = bitcoin::Address::from_script(output_script, network) {
                     bitcoind
                         .get_address_info(&address)
diff --git a/payjoin-cli/src/main.rs b/payjoin-cli/src/main.rs
index dfd8396..0dd7c7b 100644
--- a/payjoin-cli/src/main.rs
+++ b/payjoin-cli/src/main.rs
@@ -28,9 +28,17 @@ async fn main() -> Result<()> {
             app.send_payjoin(bip21, fee_rate_sat_per_vb).await?;
         }
         Some(("receive", sub_matches)) => {
-            let amount =
-                sub_matches.get_one::<String>("AMOUNT").context("Missing AMOUNT argument")?;
-            app.receive_payjoin(amount).await?;
+            let amount = sub_matches.get_one::<String>("AMOUNT")
+                .context("Missing AMOUNT argument")?;
+            #[cfg(feature = "v2")]
+            {
+                let address = sub_matches.get_one::<String>("address");
+                app.receive_payjoin(amount, address.map(|s| s.as_str())).await?;
+            }
+            #[cfg(not(feature = "v2"))]
+            {
+                app.receive_payjoin(amount).await?;
+            }
         }
         #[cfg(feature = "v2")]
         Some(("resume", _)) => {
@@ -117,6 +125,17 @@ fn cli() -> ArgMatches {
             .num_args(1)
             .help("The maximum effective fee rate the receiver is willing to pay (in sat/vB)"),
     );
+    #[cfg(feature = "v2")]
+    {
+        receive_cmd = receive_cmd.arg(
+            Arg::new("address")
+                .long("address")
+                .help("Optional Bitcoin address to receive payjoin payment")
+                .value_name("ADDRESS")
+                .num_args(1)
+                .required(false),
+        );
+    }
     #[cfg(not(feature = "v2"))]
     {
         receive_cmd = receive_cmd.arg(
diff --git a/payjoin/src/receive/v2/mod.rs b/payjoin/src/receive/v2/mod.rs
index 2881636..a349732 100644
--- a/payjoin/src/receive/v2/mod.rs
+++ b/payjoin/src/receive/v2/mod.rs
@@ -95,6 +95,10 @@ impl Receiver {
         }
     }
 
+    pub fn extract_address(&self) -> &Address {
+        &self.context.address
+    }
+
     /// Extract an OHTTP Encapsulated HTTP GET request for the Original PSBT
     pub fn extract_req(&mut self) -> Result<(Request, ohttp::ClientResponse), SessionError> {
         if SystemTime::now() > self.context.expiry {
